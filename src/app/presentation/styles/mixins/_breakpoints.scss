@mixin from($mediaquery) {
  $type-of: type-of($mediaquery);
  @if map-has-key($breakpoints, $mediaquery) {
    @media all and (min-width: #{map-get($breakpoints, $mediaquery)}) {
      @content;
    }
  } @else if $type-of == number {
    $unit: unit($mediaquery);
    @if $unit == 'px' {
      @media all and (min-width: $mediaquery) {
        @content;
      }
    } @else {
      @error ('The media-query \'#{$mediaquery}\' must have media in \'px\' unit');
    }
  } @else {
    @error ('The breakpoint \'#{$mediaquery}\' isn\'t a valid breakpoint name');
  }
}

@mixin to($mediaquery) {
  $type-of: type-of($mediaquery);
  @if map-has-key($breakpoints, $mediaquery) {
    @media all and (max-width: #{map-get($breakpoints, $mediaquery)}) {
      @content;
    }
  } @else if $type-of == number {
    $unit: unit($mediaquery);
    @if $unit == 'px' {
      @media all and (max-width: $mediaquery) {
        @content;
      }
    } @else {
      @error ('The media-query \'#{$mediaquery}\' must have media in \'px\' unit');
    }
  } @else {
    @error ('The breakpoint \'#{$mediaquery}\' isn\'t a valid breakpoint name');
  }
}

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin between($from, $to) {
  $type-of-from: type-of($from);
  $type-of-to: type-of($to);

  $min-width: if(
    map-has-key($breakpoints, $from),
    map-get($breakpoints, $from),
    if(unit($from) == 'px', $from, null)
  );

  $max-width: if(
    map-has-key($breakpoints, $to),
    map-get($breakpoints, $to),
    if(unit($to) == 'px', $to, null)
  );

  @if $min-width and $max-width {
    @media all and (min-width: #{$min-width}) and (max-width: #{$max-width}) {
      @content;
    }
  } @else {
    @error ('Invalid breakpoint values provided');
  }
}
